# encoding: utf-8

class ImageUploader < CarrierWave::Uploader::Base

  # Include RMagick or ImageScience support:
  # include CarrierWave::RMagick
  # include CarrierWave::ImageScience
  include CarrierWave::MiniMagick

  # Choose what kind of storage to use for this uploader:
  storage :file
  # storage :s3

  # Override the directory where uploaded files will be stored.
  # This is a sensible default for uploaders that are meant to be mounted:
  def store_dir
    "uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
  end

  # Provide a default URL as a default if there hasn't been a file uploaded:
   def default_url
     "no_image.png"
   end

  # Process files as they are uploaded:
  # process :scale => [200, 300]
  #
  # def scale(width, height)
  #   # do something
  # end


  # Create different versions of your uploaded files:
   version :sq do
     process :fix_orientation
     process :strip_metadata
     process :resize_to_fill => [75, 75] # 75px square cropped
   end

   version :thumbnail do
     process :fix_orientation
     process :strip_metadata
     process :resize_to_fit => [116, 116] # 116px max dimension
   end
   
   version :medium do
     process :fix_orientation
     process :strip_metadata
     process :resize_to_fit => [640, 640] # 640px max dimension
   end

  # Add a white list of extensions which are allowed to be uploaded.
  # For images you might use something like this:
  # def extension_white_list
  #   %w(jpg jpeg gif png)
  # end

  # Override the filename of the uploaded files:
  # def filename
  #   "something.jpg" if original_filename
  # end
  
  
  # Rotate the image based on the EXIF orientation
  def fix_orientation
    manipulate! do |img|
      img.auto_orient
      img = yield(img) if block_given?
      img
    end
  end
  
  # Strip EXIF metadata from the image
  def strip_metadata
    manipulate! do |img|
      img.strip
      img = yield(img) if block_given?
      img
    end
  end
end
